# Some packages being used
library(rlang)
library(data.table)
install.packages("dplyr")
library(dplyr)
library(tidyr)
library(cluster)
library(tidyverse)

# Loading the gene expression matrix
TPM_lung_file = "lung_data.txt"
tpm_lung = fread(file = TPM_lung_file, header = T)

# Renaming columns to shorter form
samp_IDs = colnames(tpm_lung)
ID_pattern = "GTEX-[a-zA-Z0-9]+|Name|Description"
new_IDs = stringr::str_match(samp_IDs,ID_pattern)
colnames(tpm_lung) = new_IDs

# Loading the co-variates matrix for Lung
L_file = "Lung_covariates.txt"
Lung = fread(file = L_file,header = T)

# Taking transpose to obtain variables as columns
transpose_lung = t(as.data.frame(Lung))
transpose_lung = as.data.frame(transpose_lung)
colnames(transpose_lung) = as.character(transpose_lung[1,])
transpose_lung = transpose_lung[-1,]

#loading the gene regulation matrix(with directionality)
reg_file = "reg_coregenes.csv"
gene_regs = read.csv(reg_file, header = T)
colnames(gene_regs)=c("gene", "Directionality")
genes=gene_regs$gene

# Seperating the required columns from PEER matrix, PC's, PEERs, sexes

PC_matrix = apply(transpose_lung[,c(1:5)],2,as.numeric)
row.names(PC_matrix) = row.names(transpose_lung)

cov_matrix = apply(transpose_lung[,c(6:60)],2,as.numeric)
row.names(cov_matrix) = row.names(transpose_lung)

PC_Cov_matrix = apply(transpose_lung[,c(1:60)],2,as.numeric)
row.names(PC_Cov_matrix) = row.names(transpose_lung)

most.cov.matrix=read.csv("D:/most.cov.vec.csv")
most.cov.matrix=most.cov.matrix[2]
colnames(cov_matrix)%in%most.cov.matrix

sex_matrix = transpose_lung %>% 
  select(sex) %>%
  mutate(sex= as.numeric(sex))

# ID's of males and females
males = row.names(sex_matrix %>% filter(sex == 1))
females = row.names(sex_matrix %>% filter(sex == 2))

# K means on all matrices
km_PC = kmeans(PC_matrix, 2, nstart= 60)
km_Cov = kmeans(cov_matrix,2,60)
km_PC_Cov = kmeans(PC_Cov_matrix,2,60)


#function to find gender distribution and naming clusters as smokers and nonsmokers
gender_dist = function(km, males, females){
  cluster_1 = names(km$cluster[km$cluster==1])
  cluster_2 = names(km$cluster[km$cluster==2])
  males_in_cluster_1 = intersect(cluster_1,males)
  males_in_cluster_2 = intersect(cluster_2,males)
  females_in_cluster_1 = intersect(cluster_1,females)
  females_in_cluster_2 = intersect(cluster_2,females)
  males_ratio_1 = length(males_in_cluster_1) / length(cluster_1)
  males_ratio_2 = length(males_in_cluster_2) / length(cluster_2)
  females_ratio_1 = length(males_in_cluster_1) / length(cluster_1)
  females_ratio_2 = length(males_in_cluster_2) / length(cluster_2)
  if(males_ratio_1 > males_ratio_2){
    smokers = cluster_1
    non_smokers = cluster_2
  } else if(males_ratio_2 > males_ratio_1){
    smokers = cluster_2
    non_smokers = cluster_1
  }
  return(list(smoke = smokers, nosmoke = non_smokers))
}

PC_cluster = gender_dist(km_PC,males,females)
Cov_cluster = gender_dist(km_Cov,males,females)
PC_Cov_cluster = gender_dist(km_PC_Cov,males,females)
direction_test =  function(cluster, gene){
  goi_expression_s = tpm_lung %>% filter(Description == gene) %>%
    select(intersect(cluster$smoke,colnames(tpm_lung)))
  s_mean = mean(as.numeric(goi_expression_s))
  s_median = median(as.numeric(goi_expression_s))
  goi_expression_ns = tpm_lung %>% filter(Description == gene) %>%
    select(intersect(cluster$nosmoke,colnames(tpm_lung)))
  ns_mean = mean(as.numeric(goi_expression_ns))
  ns_median = median(as.numeric(goi_expression_ns))
  return(c(s_mean,s_median,ns_mean,ns_median))
}
direction_df = data.frame(Measures = c("Smoker_Mean", "Smoker_Median",
                                       "Non_smoker_Mean",
                                       "Non_smoker_Median"))
for(i in genes){
  PC = direction_test(PC_cluster,i)
  Cov = direction_test(Cov_cluster,i)
  PC_Cov = direction_test(PC_Cov_cluster,i)
  df = data.frame(PC,Cov,PC_Cov)
  colnames(df) = c(paste('PC',i),paste('Cov',i),paste('PC_Cov',i))
  direction_df = cbind(direction_df,df)
}
direction_df = t(direction_df)
colnames(direction_df) = as.character(direction_df[1,])
direction_df = direction_df[-1,]
mean_diff = as.numeric(direction_df[,1]) - as.numeric(direction_df[,3])
median_diff = as.numeric(direction_df[,2]) - as.numeric(direction_df[,4])
direction_df = cbind(direction_df,mean_diff,median_diff)
row.names(corr.mat)=corr.mat$ID
colnames(v)=c("ID", "CYP1B1", "GPX2", "ALDH3A1", "MUC5AC")
write.table(v, "D:/corrsmat.xls")
corr.mat=corr.mat[,-1]
nam=corr.mat$ID
corr.mat=corr.mat[,-1]
rownames(corr.mat)=nam
corr.mat=as.numeric(corr.mat)
